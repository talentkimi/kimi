package core.html;

import core.text.Text;
import core.util.UtilMap;

/**
 * An HTML Decoder.
 */
public final class HtmlDecoder {

	/** The decoder. * */
	private static final HtmlDecoder DECODER = new HtmlDecoder();

	/**
	 * Returns the singleton HTML decoder.
	 * @return the singleton HTML decoder.
	 */
	public static final HtmlDecoder getHtmlDecoder() {
		return DECODER;
	}

	/**
	 * HTML decode the given object.
	 * @param toDecode the object to decode.
	 */
	public final String decode(Object toDecode) {
		if (toDecode == null) {
			throw new NullPointerException();
		}
		String value = toDecode.toString();
		int indexBegin = -1;
		int indexEnd = 0;
		while (indexBegin < value.length()) {
			indexBegin = value.indexOf('&', indexBegin);
			if (indexBegin == -1) {
				break;
			}
			indexEnd = value.indexOf(';', indexBegin);
			if (indexEnd == -1) {
				break;
			}
			indexEnd++;
			String from = value.substring(indexBegin, indexEnd);
			String to = (String) map.get(from.toLowerCase());
			if (to != null) {
				value = Text.replace(value, from, to);
			}
			indexBegin++;
		}
		return value;
	}

	/** The map. * */
	private final UtilMap map = new UtilMap(32, false, false);

	/**
	 * Add the given code mapping.
	 * @param from the code to map from.
	 * @param to the code to map to.
	 */
	private void addCode(String from, String to) {
		from = "&" + from + ";";
		from = from.toLowerCase();
		map.put(from, to);
	}

	/**
	 * Add the given code mapping.
	 * @param from the code to map from.
	 * @param to the code to map to.
	 */
	private void addCode(String from, char to) {
		addCode(from, String.valueOf(to));
	}

	/**
	 * Add the given code mapping.
	 * @param from the code to map from.
	 * @param to the code to map to.
	 */
	private void addCode(int from, String to) {
		String hexFrom = Integer.toHexString(from);
		addCode("#" + from, to);
		addCode("#0" + from, to);
		addCode("#00" + from, to);
		addCode("#000" + from, to);
		addCode("#x" + hexFrom, to);
		addCode("#x0" + hexFrom, to);
		addCode("#x00" + hexFrom, to);
		addCode("#x000" + hexFrom, to);
	}

	/**
	 * Add the given code mapping.
	 * @param from the code to map from.
	 * @param to the code to map to.
	 */
	private void addCode(int from, char to) {
		addCode(from, String.valueOf(to));
	}

	/**
	 * Create a new HTML decoder.
	 */
	private HtmlDecoder() {

		// Numeric Codes
		addCode(10, '\n');
		addCode(13, '\r');
		addCode(33, '!');
		addCode(34, '\"');
		addCode(35, '#');
		addCode(36, '$');
		addCode(37, '%');
		addCode(38, '&');
		addCode(39, '\'');
		addCode(40, '(');
		addCode(41, ')');
		addCode(42, '*');
		addCode(43, '+');
		addCode(44, ',');
		addCode(45, '-');
		addCode(46, '.');
		addCode(47, '/');
		addCode(48, '0');
		addCode(49, '1');
		addCode(50, '2');
		addCode(51, '3');
		addCode(52, '4');
		addCode(53, '5');
		addCode(54, '6');
		addCode(55, '7');
		addCode(56, '8');
		addCode(57, '9');
		addCode(58, ':');
		addCode(59, ';');
		addCode(60, '<');
		addCode(61, '=');
		addCode(62, '>');
		addCode(63, '?');
		addCode(64, '@');
		addCode(65, 'A');
		addCode(66, 'B');
		addCode(67, 'C');
		addCode(68, 'D');
		addCode(69, 'E');
		addCode(70, 'F');
		addCode(71, 'G');
		addCode(72, 'H');
		addCode(73, 'I');
		addCode(74, 'J');
		addCode(75, 'K');
		addCode(76, 'L');
		addCode(77, 'M');
		addCode(78, 'N');
		addCode(79, 'O');
		addCode(80, 'P');
		addCode(81, 'Q');
		addCode(82, 'R');
		addCode(83, 'S');
		addCode(84, 'T');
		addCode(85, 'U');
		addCode(86, 'V');
		addCode(87, 'W');
		addCode(88, 'X');
		addCode(89, 'Y');
		addCode(90, 'Z');
		addCode(91, '[');
		addCode(92, '\\');
		addCode(93, ']');
		addCode(94, '^');
		addCode(95, '_');
		addCode(96, '`');
		addCode(97, 'a');
		addCode(98, 'b');
		addCode(99, 'c');
		addCode(100, 'd');
		addCode(101, 'e');
		addCode(102, 'f');
		addCode(103, 'g');
		addCode(104, 'h');
		addCode(105, 'i');
		addCode(106, 'j');
		addCode(107, 'k');
		addCode(108, 'l');
		addCode(109, 'm');
		addCode(110, 'n');
		addCode(111, 'o');
		addCode(112, 'p');
		addCode(113, 'q');
		addCode(114, 'r');
		addCode(115, 's');
		addCode(116, 't');
		addCode(117, 'u');
		addCode(118, 'v');
		addCode(119, 'w');
		addCode(120, 'x');
		addCode(121, 'y');
		addCode(122, 'z');
		addCode(123, '{');
		addCode(124, '|');
		addCode(125, '}');
		addCode(126, '~');
		addCode(127, '');
		addCode(128, '€');
		addCode(129, '?');
		addCode(130, '‚');
		addCode(131, 'ƒ');
		addCode(132, '„');
		addCode(133, '…');
		addCode(134, '†');
		addCode(135, '‡');
		addCode(136, 'ˆ');
		addCode(137, '‰');
		addCode(138, 'Š');
		addCode(139, '‹');
		addCode(140, 'Œ');
		addCode(141, '?');
		addCode(142, 'Ž');
		addCode(143, '?');
		addCode(144, '?');
		addCode(145, '‘');
		addCode(146, '’');
		addCode(147, '“');
		addCode(148, '”');
		addCode(149, '•');
		addCode(150, '–');
		addCode(151, '—');
		addCode(152, '˜');
		addCode(153, '™');
		addCode(154, 'š');
		addCode(155, '›');
		addCode(156, 'œ');
		addCode(157, '?');
		addCode(158, 'ž');
		addCode(159, 'Ÿ');
		addCode(160, ' ');
		addCode(161, '¡');
		addCode(162, '¢');
		addCode(163, '£');
		addCode(164, '¤');
		addCode(165, '¥');
		addCode(166, '¦');
		addCode(167, '§');
		addCode(168, '¨');
		addCode(169, '©');
		addCode(170, 'ª');
		addCode(171, '«');
		addCode(172, '¬');
		addCode(173, '­');
		addCode(174, '®');
		addCode(175, '¯');
		addCode(176, '°');
		addCode(177, '±');
		addCode(178, '²');
		addCode(179, '³');
		addCode(180, '´');
		addCode(181, 'µ');
		addCode(182, '¶');
		addCode(183, '·');
		addCode(184, '¸');
		addCode(185, '¹');
		addCode(186, 'º');
		addCode(187, '»');
		addCode(188, '¼');
		addCode(189, '½');
		addCode(190, '¾');
		addCode(191, '¿');
		addCode(192, 'À');
		addCode(193, 'Á');
		addCode(194, 'Â');
		addCode(195, 'Ã');
		addCode(196, 'Ä');
		addCode(197, 'Å');
		addCode(198, 'Æ');
		addCode(199, 'Ç');
		addCode(200, 'È');
		addCode(201, 'É');
		addCode(202, 'Ê');
		addCode(203, 'Ë');
		addCode(204, 'Ì');
		addCode(205, 'Í');
		addCode(206, 'Î');
		addCode(207, 'Ï');
		addCode(208, 'Ð');
		addCode(209, 'Ñ');
		addCode(210, 'Ò');
		addCode(211, 'Ó');
		addCode(212, 'Ô');
		addCode(213, 'Õ');
		addCode(214, 'Ö');
		addCode(215, '×');
		addCode(216, 'Ø');
		addCode(217, 'Ù');
		addCode(218, 'Ú');
		addCode(219, 'Û');
		addCode(220, 'Ü');
		addCode(221, 'Ý');
		addCode(222, 'Þ');
		addCode(223, 'ß');
		addCode(224, 'à');
		addCode(225, 'á');
		addCode(226, 'â');
		addCode(227, 'ã');
		addCode(228, 'ä');
		addCode(229, 'å');
		addCode(230, 'æ');
		addCode(231, 'ç');
		addCode(232, 'è');
		addCode(233, 'é');
		addCode(234, 'ê');
		addCode(235, 'ë');
		addCode(236, 'ì');
		addCode(237, 'í');
		addCode(238, 'î');
		addCode(239, 'ï');
		addCode(240, 'ð');
		addCode(241, 'ñ');
		addCode(242, 'ò');
		addCode(243, 'ó');
		addCode(244, 'ô');
		addCode(245, 'õ');
		addCode(246, 'ö');
		addCode(247, '÷');
		addCode(248, 'ø');
		addCode(249, 'ù');
		addCode(250, 'ú');
		addCode(251, 'û');
		addCode(252, 'ü');
		addCode(253, 'ý');
		addCode(254, 'þ');
		addCode(255, 'ÿ');
		addCode(8212, '—');
		addCode(8220, '“');
		addCode(8221, '”');
		addCode(8226, '•');

		// Text Codes
		addCode("nbsp", String.valueOf((char) 160));
		addCode("lt", '<');
		addCode("gt", '>');
		addCode("amp", '&');
		addCode("cent", '¢');
		addCode("quot", '\"');
		addCode("pound", '£');
		addCode("copy", '©');
		addCode("reg", '®');
		addCode("trade", '™');
		addCode("frac12", '½');
		addCode("frac14", '¼');
		addCode("frac34", '¾');
		addCode("brvbar", '¦');
		addCode("deg", '°');
		addCode("iexcl", '¡');
		addCode("iquest", '¿');
		addCode("laquo", '«');
		addCode("micro", 'µ');
		addCode("middot", '·');
		addCode("not", '¬');
		addCode("para", '¶');
		addCode("raquo", '»');
		addCode("sect", '§');
		addCode("sup1", '¹');
		addCode("sup2", '²');
		addCode("sup3", '³');
		addCode("tilde", '˜');
		addCode("yen", '¥');
		addCode("ndash", '–');
		addCode("mdash", '—');
		addCode("Agrave", 'À');
		addCode("Aacute", 'Á');
		addCode("Acirc", 'Â');
		addCode("Atilde", 'Ã');
		addCode("Auml", 'Ä');
		addCode("Aring", 'Å');
		addCode("AElig", 'Æ');
		addCode("Ccedil", 'Ç');
		addCode("Egrave", 'È');
		addCode("Eacute", 'É');
		addCode("Ecirc", 'Ê');
		addCode("Euml", 'Ë');
		addCode("Igrave", 'Ì');
		addCode("Iacute", 'Í');
		addCode("Icirc", 'Î');
		addCode("Iuml", 'Ï');
		addCode("ETH", 'Ð');
		addCode("Ntilde", 'Ñ');
		addCode("Ograve", 'Ò');
		addCode("Oacute", 'Ó');
		addCode("Ocirc", 'Ô');
		addCode("Otilde", 'Õ');
		addCode("Ouml", 'Ö');
		addCode("times", '×');
		addCode("Oslash", 'Ø');
		addCode("Ugrave", 'Ù');
		addCode("Uacute", 'Ú');
		addCode("Ucirc", 'Û');
		addCode("Uuml", 'Ü');
		addCode("Yacute", 'Ý');
		addCode("THORN", 'Þ');
		addCode("szlig", 'ß');
		addCode("agrave", 'à');
		addCode("aacute", 'á');
		addCode("acirc", 'â');
		addCode("atilde", 'ã');
		addCode("auml", 'ä');
		addCode("aring", 'å');
		addCode("aelig", 'æ');
		addCode("ccedil", 'ç');
		addCode("egrave", 'è');
		addCode("eacute", 'é');
		addCode("ecirc", 'ê');
		addCode("euml", 'ë');
		addCode("igrave", 'ì');
		addCode("iacute", 'í');
		addCode("icirc", 'î');
		addCode("iuml", 'ï');
		addCode("eth", 'ð');
		addCode("ntilde", 'ñ');
		addCode("ograve", 'ò');
		addCode("oacute", 'ó');
		addCode("ocirc", 'ô');
		addCode("otilde", 'õ');
		addCode("ouml", 'ö');
		addCode("divide", '÷');
		addCode("oslash", 'ø');
		addCode("ugrave", 'ù');
		addCode("uacute", 'ú');
		addCode("ucirc", 'û');
		addCode("uuml", 'ü');
		addCode("yacute", 'ý');
		addCode("thorn", 'þ');
		addCode("yuml", 'ÿ');
		addCode("OElig", 'Œ');
		addCode("oelig", 'œ');
		addCode("Scaron", 'Š');
		addCode("scaron", 'š');
		addCode("Yuml", 'Ÿ');
		addCode("fnof", 'ƒ');
		addCode("circ", 'ˆ');
		addCode("tilde", '˜');
		addCode("rdquo","”");
		addCode("rsquo","’");
		addCode("ordm","º");
		addCode("lsquo","‘");
		addCode("bull","•");
		addCode("apos","'");
	}

	public static void main(String[] args) {
		String decode = "Alt du dr&oslash;mmer om.:";
		System.out.println(decode);
		decode = getHtmlDecoder().decode(decode);
		System.out.println(decode);
		decode = getHtmlDecoder().decode(decode);
		System.out.println(decode);
	}
}
