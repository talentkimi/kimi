package com.gpsso;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * <b>欢迎访问：<a href='http://www.gpsso.com'>www.gpsso.com</a>，谢谢您的支持！</b>
 *
 * This class was generated by Apache CXF 2.6.0
 * 2015-06-05T16:35:18.028+08:00
 * Generated source version: 2.6.0
 * 
 */
@WebServiceClient(name = "IdCard", 
                  wsdlLocation = "file:/C:/Users/fang.zhou/workspace/kimi/src/main/resources/idcard.wsdl",
                  targetNamespace = "http://gpsso.com/") 
public class IdCard extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://gpsso.com/", "IdCard");
    public final static QName IdCardSoap12 = new QName("http://gpsso.com/", "IdCardSoap12");
    public final static QName IdCardSoap = new QName("http://gpsso.com/", "IdCardSoap");
    public final static QName IdCardHttpGet = new QName("http://gpsso.com/", "IdCardHttpGet");
    public final static QName IdCardHttpPost = new QName("http://gpsso.com/", "IdCardHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/fang.zhou/workspace/kimi/src/main/resources/idcard.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(IdCard.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/fang.zhou/workspace/kimi/src/main/resources/idcard.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public IdCard(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public IdCard(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public IdCard() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public IdCard(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public IdCard(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public IdCard(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns IdCardSoap
     */
    @WebEndpoint(name = "IdCardSoap12")
    public IdCardSoap getIdCardSoap12() {
        return super.getPort(IdCardSoap12, IdCardSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IdCardSoap
     */
    @WebEndpoint(name = "IdCardSoap12")
    public IdCardSoap getIdCardSoap12(WebServiceFeature... features) {
        return super.getPort(IdCardSoap12, IdCardSoap.class, features);
    }
    /**
     *
     * @return
     *     returns IdCardSoap
     */
    @WebEndpoint(name = "IdCardSoap")
    public IdCardSoap getIdCardSoap() {
        return super.getPort(IdCardSoap, IdCardSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IdCardSoap
     */
    @WebEndpoint(name = "IdCardSoap")
    public IdCardSoap getIdCardSoap(WebServiceFeature... features) {
        return super.getPort(IdCardSoap, IdCardSoap.class, features);
    }
    /**
     *
     * @return
     *     returns IdCardHttpGet
     */
    @WebEndpoint(name = "IdCardHttpGet")
    public IdCardHttpGet getIdCardHttpGet() {
        return super.getPort(IdCardHttpGet, IdCardHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IdCardHttpGet
     */
    @WebEndpoint(name = "IdCardHttpGet")
    public IdCardHttpGet getIdCardHttpGet(WebServiceFeature... features) {
        return super.getPort(IdCardHttpGet, IdCardHttpGet.class, features);
    }
    /**
     *
     * @return
     *     returns IdCardHttpPost
     */
    @WebEndpoint(name = "IdCardHttpPost")
    public IdCardHttpPost getIdCardHttpPost() {
        return super.getPort(IdCardHttpPost, IdCardHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IdCardHttpPost
     */
    @WebEndpoint(name = "IdCardHttpPost")
    public IdCardHttpPost getIdCardHttpPost(WebServiceFeature... features) {
        return super.getPort(IdCardHttpPost, IdCardHttpPost.class, features);
    }

}
